---
title: "More Efficient Working"
subtitle: "A guide to standardising scripts" 
author: "Corey Voller"
date: "2024-01-22"
toc: true
categories: [news,R, standardisation]
image: "image.jpg"
---

# What are snippets?

A useful way to cut-down the amount of repitive typing is through the use of snippets. My love of snippets is primarily fueled by my inherent laziness (If any future employers are reading this I'm joking). A snippet allows you to automatically insert pieces of code. When I mention custom snippets to people they have often never heard of them but you likely use them without knowing and can be very useful. For example, when I type 'for' and press tab, I am met with the following chunk of code.

```{r,eval=FALSE}
for (variable in vector) {
  
}
```

There are numerous pre-defined snippets that exist in the settings already but we can insert our own customised snippets. You can see some larger snippets on my GitHub [here](https://github.com/cgvoller/standardisingScripts).

# Motivation

To anyone who has QC'd code, they will understand the frustration of loading up a script and seeing a huge mess of disjointed code with a lack of structure and comments (Not mentioning any names - I am far from perfect myself!). As part of having good coding practices, I believe it is good to have consistency and fluency across scripts, not just for an individual but across a team. This is where snippets can be useful, I can load up a script template which will be consistent across my projects and work and therefore easier to navigate across them.

# How to add custom snippets

Within RStudio, navigate to the top and click Tools -\> Global Options and select the code tab on the left. It should look something like this:

![](options.jpg){fig-align="center" width="652"}

Ensure that snippets is ticked at the bottom and click 'Edit Snippets'.

Next, add in your custom snippet by typing 'snippet' followed by whatever name you choose for it and its functionality. The word snippet should be left aligned and coloured purple as seen below for my snippet 'pastefile'.

![](snippet_menu.JPG){fig-align="center" width="631" height="629"}

To use your custom snippets, begin typing the name of the snippet into the script and you should see it appear with brackets `{snippet}` . Press 'tab' and it should load/execute the snippet.

![](test.jpg){fig-align="center" width="628"}

# Examples

## Change \\ to / when pasting file paths

The first snippet is fairly trivial but surprisingly useful in day-to-day working.

```{r,eval=FALSE}

snippet pastefile
	"`r gsub('"', "", gsub("\\\\", "/", readClipboard()))`"
	
```

When copying and pasting file paths in R you are often met with backslashes which R complains about. The above snippet, when you copy a file path and type 'pastefile' it will past the file path location with forward slashes instead.

## Generic Script Template 1

This is a generic script template with a few features. Firstly, at the top I like to define a few things:

1.  Path of the project
2.  Overall purpose of the script
3.  Who wrote the script
4.  Date (which is taken automatically using `sys.time()`
5.  Who and when the code has been QC'd

You'll also notice I use `## text ----`. The reason for this is it creates section headers which make navigating code easier.

![](sections.JPG){fig-align="center" width="687"}

```{r,eval=FALSE}

snippet header
	## ─────────────────────────────────────────────────────────────────────────────
	##
	## Project: `r paste(gsub(".*STUDY FOLDER/","",getwd()))`
	##
	## Purpose of script:
	##
	## Author: 
	##
	## Date Created: `r paste(format(Sys.time(), "%d-%m-%Y"))`
	##
	## QC'd by:
	## QC date:
	##
	## ─────────────────────────────────────────────────────────────────────────────
	##
	## Notes:
	##   
	##
	## ─────────────────────────────────────────────────────────────────────────────
	##
	## 
	## set working directory -------------------------------------------------------
	message("Set working directory")

	# setwd("~/")  
	
	## Options ---------------------------------------------------------------------
	
	# options(scipen = 6, digits = 4) # View outputs in non-scientific notation

	## Load packages ---------------------------------------------------------------
	message("Load packages")

	## Set file paths --------------------------------------------------------------
	message("Set file paths")

	base.path <- ""
	data.path <- ""
	output.path <- ""
	template.path <- ""


	## Load data -------------------------------------------------------------------
	message("Load data")
	 
	# data <- fread(file.path(data.path, ".csv")) # or read.csv, etc
	# load(x,file.path(data.path,".RData"))
	# load(file.path("C:/Users/isfar.RData"), isfar_env <- new.env())


	## First Section ---------------------------------------------------------------
	message("First Section")

	## Second Section --------------------------------------------------------------
	message("Second Section")


	## Third Section ---------------------------------------------------------------
	message("Third section")


	## Output  ---------------------------------------------------------------------
	message("Output")

	# save(x,file.path(output.path,".RData"))
	# write.csv(x,file.path(output.path,"x.csv")



```

## Config Script Template
