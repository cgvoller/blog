[
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "New Year, New Blog?",
    "section": "",
<<<<<<< HEAD
    "text": "I’ve contemplated creating a blog for a while now with the hopes of achieving a few personal goals of mine. Firstly, I hope this can become a library of useful information I have accumulated in my journey thus far. Previously, interesting tricks, tips and code have often become buried in a maze of folders, forgotten and lost over time which is a shame.\nSecondly, I hope this blog can act as a motivator for myself to search out new developments in statistics and R programming - with the added bonus of potentially helping out one or two other people a long the way. It has long been a goal of mine to release useful information freely available to the public. I find it a shame when a persons learning and development is limited through pesky pay-walls.\nAnother aspiration of mine is to become better at writing and communicate complex ideas in a simple manner such that statisticians and non-statisticians alike can understand. Finally, I like the idea of owning something myself, a place to have free reign over what is posted and how."
=======
    "text": "I’ve contemplated creating a blog for a while now with the hopes of achieving a few personal goals of mine. Firstly, I hope this can become a library of useful information I have accumulated in my journey thus far. Previously, interesting tricks, tips and code have often become buried in a maze of folders, forgotten and lost over time - which is a shame.\nSecondly, I hope this blog can act as a motivator for myself to search out new developments in statistics and R programming - with the added bonus of potentially helping out one or two other people a long the way. It has long been a goal of mine to release useful information freely available to the public. I find it a shame when a persons learning and development is limited through pesky pay-walls.\nAnother aspiration of mine is to become better at writing and communicate complex ideas in a simple manner such that statisticians and non-statisticians alike can understand. Finally, I like the idea of owning something myself, a place to have free reign over what is posted and how."
>>>>>>> 5080d96ce132128087f7733f2d9a3896fd9e9c72
  },
  {
    "objectID": "posts/ipcwswitch/index.html",
    "href": "posts/ipcwswitch/index.html",
    "title": "ipcwswitch",
    "section": "",
    "text": "This is a post with executable code."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "A Mathemedician’s Blog",
    "section": "",
    "text": "ipcwswitch\n\n\nAn R package for inverse probability of censoring weighting with an application to switches in clinical trials\n\n\n\n\nnews\n\n\nR\n\n\nsurvival analysis\n\n\n\n\n\n\n\n\n\n\n\nFeb 4, 2024\n\n\nCorey Voller\n\n\n\n\n\n\n  \n\n\n\n\nMore Efficient Working\n\n\nA guide to standardising scripts\n\n\n\n\nnews\n\n\nR\n\n\nstandardisation\n\n\n\n\n\n\n\n\n\n\n\nJan 28, 2024\n\n\nCorey Voller\n\n\n\n\n\n\n  \n\n\n\n\nNew Year, New Blog?\n\n\n\n\n\n\n\nnews\n\n\n\n\n\n\n\n\n\n\n\nJan 21, 2024\n\n\nCorey Voller\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "My name is Corey, I am currently working as a Statistician in the UK. I graduated from UCL with a Masters in Medical Statistics. I enjoy searching for new topics outside of my day-job relating to statistics and programming in R although, I will occasionally use Python to create animated videos using a package called manim (if you’ve seen any 3Blue1Brown video’s on YouTube you will have seen this package implemented there.)\nThis blog will be focused on all things statistics with a focus on medicine although not exclusively. The aim is to push my statistical knowledge, searching for new methods and to catalogue these. A lot of my day job is spent looking at static outputs so where possible I will try to showcase interactive and alternative ways to display data (3-d plots, dynamic figures, tables, etc). The opinions and thoughts expressed here are my own and do not represent anyone else (i.e., employer).\nThis blog is currently written using quarto, an open-source publishing system. At the time of writing, I am using it within RStudio."
  },
  {
    "objectID": "misc.html",
    "href": "misc.html",
    "title": "misc",
    "section": "",
    "text": "I will be updating this page periodically to display a network diagram of the books I have read each calendar year. You might be asking why would I do that. The only answer I can think of is because it seems like a neat way to display data and to motivate me to read more (Note, the below network is incomplete but it is interactive!) :)\n\n2024\n\nmiserables = FileAttachment(\"miserables.json\").json()\n\nfunction ForceGraph(\n  {\n    nodes, // an iterable of node objects (typically [{id}, …])\n    links // an iterable of link objects (typically [{source, target}, …])\n  },\n  {\n    nodeId = (d) =&gt; d.id, // given d in nodes, returns a unique identifier (string)\n    nodeGroup, // given d in nodes, returns an (ordinal) value for color\n    nodeGroups, // an array of ordinal values representing the node groups\n    nodeTitle, // given d in nodes, a title string\n    nodeFill = \"currentColor\", // node stroke fill (if not using a group color encoding)\n    nodeStroke = \"#fff\", // node stroke color\n    nodeStrokeWidth = 1.5, // node stroke width, in pixels\n    nodeStrokeOpacity = 1, // node stroke opacity\n    nodeRadius = 5, // node radius, in pixels\n    nodeStrength,\n    linkSource = ({ source }) =&gt; source, // given d in links, returns a node identifier string\n    linkTarget = ({ target }) =&gt; target, // given d in links, returns a node identifier string\n    linkStroke = \"#999\", // link stroke color\n    linkStrokeOpacity = 0.6, // link stroke opacity\n    linkStrokeWidth = 1.5, // given d in links, returns a stroke width in pixels\n    linkStrokeLinecap = \"round\", // link stroke linecap\n    linkStrength,\n    colors = d3.schemeTableau10, // an array of color strings, for the node groups\n    width = 640, // outer width, in pixels\n    height = 400, // outer height, in pixels\n    invalidation // when this promise resolves, stop the simulation\n  } = {}\n) {\n  // Compute values.\n  const N = d3.map(nodes, nodeId).map(intern);\n  const LS = d3.map(links, linkSource).map(intern);\n  const LT = d3.map(links, linkTarget).map(intern);\n  if (nodeTitle === undefined) nodeTitle = (_, i) =&gt; N[i];\n  const T = nodeTitle == null ? null : d3.map(nodes, nodeTitle);\n  const G = nodeGroup == null ? null : d3.map(nodes, nodeGroup).map(intern);\n  const W =\n    typeof linkStrokeWidth !== \"function\"\n      ? null\n      : d3.map(links, linkStrokeWidth);\n  const L = typeof linkStroke !== \"function\" ? null : d3.map(links, linkStroke);\n\n  // Replace the input nodes and links with mutable objects for the simulation.\n  nodes = d3.map(nodes, (_, i) =&gt; ({ id: N[i] }));\n  links = d3.map(links, (_, i) =&gt; ({ source: LS[i], target: LT[i] }));\n\n  // Compute default domains.\n  if (G && nodeGroups === undefined) nodeGroups = d3.sort(G);\n\n  // Construct the scales.\n  const color = nodeGroup == null ? null : d3.scaleOrdinal(nodeGroups, colors);\n\n  // Construct the forces.\n  const forceNode = d3.forceManyBody();\n  const forceLink = d3.forceLink(links).id(({ index: i }) =&gt; N[i]);\n  if (nodeStrength !== undefined) forceNode.strength(nodeStrength);\n  if (linkStrength !== undefined) forceLink.strength(linkStrength);\n\n  const simulation = d3\n    .forceSimulation(nodes)\n    .force(\"link\", forceLink)\n    .force(\"charge\", forceNode)\n    .force(\"center\", d3.forceCenter())\n    .force('collide', d3.forceCollide(function(d) {\n    return d.id === \"j\" ? 20 : 10\n  }))\n    .on(\"tick\", ticked);\n\n  const svg = d3\n    .create(\"svg\")\n    .attr(\"width\", width)\n    .attr(\"height\", height)\n    .attr(\"viewBox\", [-width / 2, -height / 2, width, height])\n    .attr(\"style\", \"max-width: 100%; height: auto; height: intrinsic;\");\n\n  const link = svg\n    .append(\"g\")\n    .attr(\"stroke\", typeof linkStroke !== \"function\" ? linkStroke : null)\n    .attr(\"stroke-opacity\", linkStrokeOpacity)\n    .attr(\n      \"stroke-width\",\n      typeof linkStrokeWidth !== \"function\" ? linkStrokeWidth : null\n    )\n    .attr(\"stroke-linecap\", linkStrokeLinecap)\n    .selectAll(\"line\")\n    .data(links)\n    .join(\"line\");\n\n  const node = svg\n    .append(\"g\")\n    .attr(\"fill\", nodeFill)\n    .attr(\"stroke\", nodeStroke)\n    .attr(\"stroke-opacity\", nodeStrokeOpacity)\n    .attr(\"stroke-width\", nodeStrokeWidth)\n    // SM: change\n    // .selectAll(\"circle\")\n    .selectAll(\"g\")\n    .data(nodes)\n    // SM: change\n    // .join(\"circle\")\n    .join(\"g\")\n    // SM: change\n    // .attr(\"r\", nodeRadius)\n    .call(drag(simulation));\n\n  // SM: change\n  // append circle and text to node &lt;g&gt; (selection of all &lt;g&gt; elements corresponding to each node)\n  node.append(\"circle\").attr(\"r\", nodeRadius);\n  node\n    .append(\"text\")\n    .text(({ index: i }) =&gt; T[i])\n    .attr(\"fill\", \"gray\")\n    .attr(\"stroke\", \"none\")\n    .attr(\"font-size\", \"0.7em\");\n\n  if (W) link.attr(\"stroke-width\", ({ index: i }) =&gt; W[i]);\n  if (L) link.attr(\"stroke\", ({ index: i }) =&gt; L[i]);\n  if (G) node.attr(\"fill\", ({ index: i }) =&gt; color(G[i]));\n  if (T) node.append(\"title\").text(({ index: i }) =&gt; T[i]);\n  if (invalidation != null) invalidation.then(() =&gt; simulation.stop());\n\n  function intern(value) {\n    return value !== null && typeof value === \"object\"\n      ? value.valueOf()\n      : value;\n  }\n\n  function ticked() {\n    link\n      .attr(\"x1\", (d) =&gt; d.source.x)\n      .attr(\"y1\", (d) =&gt; d.source.y)\n      .attr(\"x2\", (d) =&gt; d.target.x)\n      .attr(\"y2\", (d) =&gt; d.target.y);\n\n    node.attr(\"transform\", (d) =&gt; `translate(${d.x} ${d.y})`);\n    // SM: change\n    // instead of moving the circle centers we transform the whole &lt;g&gt;\n    // .attr(\"cx\", d =&gt; d.x)\n    // .attr(\"cy\", d =&gt; d.y);\n  }\n\n  function drag(simulation) {\n    function dragstarted(event) {\n      if (!event.active) simulation.alphaTarget(0.3).restart();\n      event.subject.fx = event.subject.x;\n      event.subject.fy = event.subject.y;\n    }\n\n    function dragged(event) {\n      event.subject.fx = event.x;\n      event.subject.fy = event.y;\n    }\n\n    function dragended(event) {\n      if (!event.active) simulation.alphaTarget(0);\n      event.subject.fx = null;\n      event.subject.fy = null;\n    }\n\n    return d3\n      .drag()\n      .on(\"start\", dragstarted)\n      .on(\"drag\", dragged)\n      .on(\"end\", dragended);\n  }\n\n  return Object.assign(svg.node(), { scales: { color } });\n}\n\nchart = ForceGraph(miserables, {\n  nodeId: d =&gt; d.id,\n  nodeGroup: d =&gt; d.group,\n  nodeTitle: d =&gt; `${d.id}\\n${d.group}`,\n  linkStrokeWidth: l =&gt; Math.sqrt(l.value),\n  width,\n  height: 600,\n  invalidation // a promise to stop the simulation when the cell is re-run\n})"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "My name is Corey, I am currently working as a Statistician in the UK. I graduated from UCL with a Masters in Medical Statistics. I enjoy searching for new topics outside of my day-job relating to statistics and programming in R although, I will occasionally use Python to create animated videos using a package called manim (if you’ve seen any 3Blue1Brown video’s on YouTube you will have seen this package implemented there.)\nThis blog will be focused on all things statistics with a focus on medicine although not exclusively. The aim is to push my statistical knowledge, searching for new methods and to catalogue these. A lot of my day job is spent looking at static outputs so where possible I will try to showcase interactive and alternative ways to display data (3-d plots, dynamic figures, tables, etc). The opinions and thoughts expressed here are my own and do not represent anyone else (i.e., employer).\nThis blog is currently written using quarto, an open-source publishing system. At the time of writing, I am using it within RStudio."
  },
  {
    "objectID": "misc.html",
    "href": "misc.html",
    "title": "misc",
    "section": "",
    "text": "I will be updating this page periodically to display a network diagram of the books I have read each calendar year. You might be asking why would I do that. The only answer I can think of is because it seems like a neat way to display data and to motivate me to read more (Note, the below network is incomplete but it is interactive!) :)\n\n2024\n\nmiserables = FileAttachment(\"miserables.json\").json()\n\nfunction ForceGraph(\n  {\n    nodes, // an iterable of node objects (typically [{id}, …])\n    links // an iterable of link objects (typically [{source, target}, …])\n  },\n  {\n    nodeId = (d) =&gt; d.id, // given d in nodes, returns a unique identifier (string)\n    nodeGroup, // given d in nodes, returns an (ordinal) value for color\n    nodeGroups, // an array of ordinal values representing the node groups\n    nodeTitle, // given d in nodes, a title string\n    nodeFill = \"currentColor\", // node stroke fill (if not using a group color encoding)\n    nodeStroke = \"#fff\", // node stroke color\n    nodeStrokeWidth = 1.5, // node stroke width, in pixels\n    nodeStrokeOpacity = 1, // node stroke opacity\n    nodeRadius = 5, // node radius, in pixels\n    nodeStrength,\n    linkSource = ({ source }) =&gt; source, // given d in links, returns a node identifier string\n    linkTarget = ({ target }) =&gt; target, // given d in links, returns a node identifier string\n    linkStroke = \"#999\", // link stroke color\n    linkStrokeOpacity = 0.6, // link stroke opacity\n    linkStrokeWidth = 1.5, // given d in links, returns a stroke width in pixels\n    linkStrokeLinecap = \"round\", // link stroke linecap\n    linkStrength,\n    colors = d3.schemeTableau10, // an array of color strings, for the node groups\n    width = 640, // outer width, in pixels\n    height = 400, // outer height, in pixels\n    invalidation // when this promise resolves, stop the simulation\n  } = {}\n) {\n  // Compute values.\n  const N = d3.map(nodes, nodeId).map(intern);\n  const LS = d3.map(links, linkSource).map(intern);\n  const LT = d3.map(links, linkTarget).map(intern);\n  if (nodeTitle === undefined) nodeTitle = (_, i) =&gt; N[i];\n  const T = nodeTitle == null ? null : d3.map(nodes, nodeTitle);\n  const G = nodeGroup == null ? null : d3.map(nodes, nodeGroup).map(intern);\n  const W =\n    typeof linkStrokeWidth !== \"function\"\n      ? null\n      : d3.map(links, linkStrokeWidth);\n  const L = typeof linkStroke !== \"function\" ? null : d3.map(links, linkStroke);\n\n  // Replace the input nodes and links with mutable objects for the simulation.\n  nodes = d3.map(nodes, (_, i) =&gt; ({ id: N[i] }));\n  links = d3.map(links, (_, i) =&gt; ({ source: LS[i], target: LT[i] }));\n\n  // Compute default domains.\n  if (G && nodeGroups === undefined) nodeGroups = d3.sort(G);\n\n  // Construct the scales.\n  const color = nodeGroup == null ? null : d3.scaleOrdinal(nodeGroups, colors);\n\n  // Construct the forces.\n  const forceNode = d3.forceManyBody();\n  const forceLink = d3.forceLink(links).id(({ index: i }) =&gt; N[i]);\n  if (nodeStrength !== undefined) forceNode.strength(nodeStrength);\n  if (linkStrength !== undefined) forceLink.strength(linkStrength);\n\n  const simulation = d3\n    .forceSimulation(nodes)\n    .force(\"link\", forceLink)\n    .force(\"charge\", forceNode)\n    .force(\"center\", d3.forceCenter())\n    .force('collide', d3.forceCollide(function(d) {\n    return d.id === \"j\" ? 20 : 10\n  }))\n    .on(\"tick\", ticked);\n\n  const svg = d3\n    .create(\"svg\")\n    .attr(\"width\", width)\n    .attr(\"height\", height)\n    .attr(\"viewBox\", [-width / 2, -height / 2, width, height])\n    .attr(\"style\", \"max-width: 100%; height: auto; height: intrinsic;\");\n\n  const link = svg\n    .append(\"g\")\n    .attr(\"stroke\", typeof linkStroke !== \"function\" ? linkStroke : null)\n    .attr(\"stroke-opacity\", linkStrokeOpacity)\n    .attr(\n      \"stroke-width\",\n      typeof linkStrokeWidth !== \"function\" ? linkStrokeWidth : null\n    )\n    .attr(\"stroke-linecap\", linkStrokeLinecap)\n    .selectAll(\"line\")\n    .data(links)\n    .join(\"line\");\n\n  const node = svg\n    .append(\"g\")\n    .attr(\"fill\", nodeFill)\n    .attr(\"stroke\", nodeStroke)\n    .attr(\"stroke-opacity\", nodeStrokeOpacity)\n    .attr(\"stroke-width\", nodeStrokeWidth)\n    // SM: change\n    // .selectAll(\"circle\")\n    .selectAll(\"g\")\n    .data(nodes)\n    // SM: change\n    // .join(\"circle\")\n    .join(\"g\")\n    // SM: change\n    // .attr(\"r\", nodeRadius)\n    .call(drag(simulation));\n\n  // SM: change\n  // append circle and text to node &lt;g&gt; (selection of all &lt;g&gt; elements corresponding to each node)\n  node.append(\"circle\").attr(\"r\", nodeRadius);\n  node\n    .append(\"text\")\n    .text(({ index: i }) =&gt; T[i])\n    .attr(\"fill\", \"gray\")\n    .attr(\"stroke\", \"none\")\n    .attr(\"font-size\", \"0.7em\");\n\n  if (W) link.attr(\"stroke-width\", ({ index: i }) =&gt; W[i]);\n  if (L) link.attr(\"stroke\", ({ index: i }) =&gt; L[i]);\n  if (G) node.attr(\"fill\", ({ index: i }) =&gt; color(G[i]));\n  if (T) node.append(\"title\").text(({ index: i }) =&gt; T[i]);\n  if (invalidation != null) invalidation.then(() =&gt; simulation.stop());\n\n  function intern(value) {\n    return value !== null && typeof value === \"object\"\n      ? value.valueOf()\n      : value;\n  }\n\n  function ticked() {\n    link\n      .attr(\"x1\", (d) =&gt; d.source.x)\n      .attr(\"y1\", (d) =&gt; d.source.y)\n      .attr(\"x2\", (d) =&gt; d.target.x)\n      .attr(\"y2\", (d) =&gt; d.target.y);\n\n    node.attr(\"transform\", (d) =&gt; `translate(${d.x} ${d.y})`);\n    // SM: change\n    // instead of moving the circle centers we transform the whole &lt;g&gt;\n    // .attr(\"cx\", d =&gt; d.x)\n    // .attr(\"cy\", d =&gt; d.y);\n  }\n\n  function drag(simulation) {\n    function dragstarted(event) {\n      if (!event.active) simulation.alphaTarget(0.3).restart();\n      event.subject.fx = event.subject.x;\n      event.subject.fy = event.subject.y;\n    }\n\n    function dragged(event) {\n      event.subject.fx = event.x;\n      event.subject.fy = event.y;\n    }\n\n    function dragended(event) {\n      if (!event.active) simulation.alphaTarget(0);\n      event.subject.fx = null;\n      event.subject.fy = null;\n    }\n\n    return d3\n      .drag()\n      .on(\"start\", dragstarted)\n      .on(\"drag\", dragged)\n      .on(\"end\", dragended);\n  }\n\n  return Object.assign(svg.node(), { scales: { color } });\n}\n\nchart = ForceGraph(miserables, {\n  nodeId: d =&gt; d.id,\n  nodeGroup: d =&gt; d.group,\n  nodeTitle: d =&gt; `${d.id}\\n${d.group}`,\n  linkStrokeWidth: l =&gt; Math.sqrt(l.value),\n  width,\n  height: 600,\n  invalidation // a promise to stop the simulation when the cell is re-run\n})"
  },
  {
    "objectID": "posts/Standardising Scripts/index.html",
    "href": "posts/Standardising Scripts/index.html",
    "title": "More Efficient Working",
    "section": "",
<<<<<<< HEAD
    "text": "A useful way to cut-down the amount of repetitive typing is through the use of snippets. My love of snippets is primarily fueled by my inherent laziness (If any future employers are reading this I’m joking). A snippet allows you to automatically insert pieces of code. When I mention custom snippets to people they have often never heard of them but you likely use them without knowing and can be very useful. For example, when I type ‘for’ and press tab, I am met with the following chunk of code.\n\nfor (variable in vector) {\n  \n}\n\nThere are numerous pre-defined snippets that exist in the settings already but we can insert our own customised snippets. You can see some larger snippets on my GitHub here."
=======
    "text": "A useful way to cut-down the amount of repitive typing is through the use of snippets. My love of snippets is primarily fueled by my inherent laziness (If any future employers are reading this I’m joking). A snippet allows you to automatically insert pieces of code. When I mention custom snippets to people they have often never heard of them but you likely use them without knowing and can be very useful. For example, when I type ‘for’ and press tab, I am met with the following chunk of code.\n\nfor (variable in vector) {\n  \n}\n\nThere are numerous pre-defined snippets that exist in the settings already but we can insert our own customised snippets. You can see some larger snippets on my GitHub here."
>>>>>>> 5080d96ce132128087f7733f2d9a3896fd9e9c72
  },
  {
    "objectID": "posts/Standardising Scripts/index.html#change-to-when-pasting-file-paths",
    "href": "posts/Standardising Scripts/index.html#change-to-when-pasting-file-paths",
    "title": "More Efficient Working",
    "section": "Change \\ to / when pasting file paths",
    "text": "Change \\ to / when pasting file paths\nThe first snippet is fairly trivial but surprisingly useful in day-to-day working.\n\nsnippet pastefile\n    \"`r gsub('\"', \"\", gsub(\"\\\\\\\\\", \"/\", readClipboard()))`\"\n\nWhen copying and pasting file paths in R you are often met with backslashes which R complains about. The above snippet, when you copy a file path and type ‘pastefile’ it will past the file path location with forward slashes instead."
  },
  {
<<<<<<< HEAD
=======
    "objectID": "posts/Standardising Scripts/index.html#script-template-1",
    "href": "posts/Standardising Scripts/index.html#script-template-1",
    "title": "More Efficient Working",
    "section": "Script Template 1",
    "text": "Script Template 1\nThis is a generic script template with a few features. Firstly, at the top I like to define a few things:\n\nPath of the project\nOverall purpose of the script\nWho wrote the script\nDate (which is taken automatically using sys.time()\nWho and when the code has been QC’d\n\nYou’ll also notice I use ## text ----. The reason for this is it creates section headers which make navigating code easier.\n\n\nsnippet header\n    ## ─────────────────────────────────────────────────────────────────────────────\n    ##\n    ## Project: `r paste(gsub(\".*STUDY FOLDER/\",\"\",getwd()))`\n    ##\n    ## Purpose of script:\n    ##\n    ## Author: \n    ##\n    ## Date Created: `r paste(format(Sys.time(), \"%d-%m-%Y\"))`\n    ##\n    ## QC'd by:\n    ## QC date:\n    ##\n    ## ─────────────────────────────────────────────────────────────────────────────\n    ##\n    ## Notes:\n    ##   \n    ##\n    ## ─────────────────────────────────────────────────────────────────────────────\n    ##\n    ## \n    ## set working directory -------------------------------------------------------\n    message(\"Set working directory\")\n\n    # setwd(\"~/\")  \n    \n    ## Options ---------------------------------------------------------------------\n    \n    # options(scipen = 6, digits = 4) # View outputs in non-scientific notation\n\n    ## Load packages ---------------------------------------------------------------\n    message(\"Load packages\")\n\n    ## Set file paths --------------------------------------------------------------\n    message(\"Set file paths\")\n\n    base.path &lt;- \"\"\n    data.path &lt;- \"\"\n    output.path &lt;- \"\"\n    template.path &lt;- \"\"\n\n\n    ## Load data -------------------------------------------------------------------\n    message(\"Load data\")\n     \n    # data &lt;- fread(file.path(data.path, \".csv\")) # or read.csv, etc\n    # load(x,file.path(data.path,\".RData\"))\n    # load(file.path(\"C:/Users/isfar.RData\"), isfar_env &lt;- new.env())\n\n\n    ## First Section ---------------------------------------------------------------\n    message(\"First Section\")\n\n    ## Second Section --------------------------------------------------------------\n    message(\"Second Section\")\n\n\n    ## Third Section ---------------------------------------------------------------\n    message(\"Third section\")\n\n\n    ## Output  ---------------------------------------------------------------------\n    message(\"Output\")\n\n    # save(x,file.path(output.path,\".RData\"))\n    # write.csv(x,file.path(output.path,\"x.csv\")"
  },
  {
    "objectID": "posts/Standardising Scripts/index.html#script-template-2",
    "href": "posts/Standardising Scripts/index.html#script-template-2",
    "title": "More Efficient Working",
    "section": "Script Template 2",
    "text": "Script Template 2"
  },
  {
>>>>>>> 5080d96ce132128087f7733f2d9a3896fd9e9c72
    "objectID": "posts/Standardising Scripts/index.html#generic-script-template-1",
    "href": "posts/Standardising Scripts/index.html#generic-script-template-1",
    "title": "More Efficient Working",
    "section": "Generic Script Template 1",
<<<<<<< HEAD
    "text": "Generic Script Template 1\nThis is a generic script template with a few features. Firstly, at the top I like to define a few things:\n\nPath of the project\nOverall purpose of the script\nWho wrote the script\nDate (which is taken automatically using sys.time())\nWho and when the code has been QC’d\n\nYou’ll also notice I use ## text ----. The reason for this is it creates section headers which make navigating code easier.\n\n\n\n\n\n\nsnippet header\n    ## ─────────────────────────────────────────────────────────────────────────────\n    ##\n    ## Project: `r paste(gsub(\".*STUDY FOLDER/\",\"\",getwd()))`\n    ##\n    ## Purpose of script:\n    ##\n    ## Author: \n    ##\n    ## Date Created: `r paste(format(Sys.time(), \"%d-%m-%Y\"))`\n    ##\n    ## QC'd by:\n    ## QC date:\n    ##\n    ## ─────────────────────────────────────────────────────────────────────────────\n    ##\n    ## Notes:\n    ##   \n    ##\n    ## ─────────────────────────────────────────────────────────────────────────────\n    ##\n    ## \n    ## set working directory -------------------------------------------------------\n    message(\"Set working directory\")\n\n    # setwd(\"~/\")  \n    \n    ## Options ---------------------------------------------------------------------\n    \n    # options(scipen = 6, digits = 4) # View outputs in non-scientific notation\n\n    ## Load packages ---------------------------------------------------------------\n    message(\"Load packages\")\n\n    ## Set file paths --------------------------------------------------------------\n    message(\"Set file paths\")\n\n    base.path &lt;- \"\"\n    data.path &lt;- \"\"\n    output.path &lt;- \"\"\n    template.path &lt;- \"\"\n\n\n    ## Load data -------------------------------------------------------------------\n    message(\"Load data\")\n     \n    # data &lt;- fread(file.path(data.path, \".csv\")) # or read.csv, etc\n    # load(x,file.path(data.path,\".RData\"))\n    # load(file.path(\"C:/Users/isfar.RData\"), isfar_env &lt;- new.env())\n\n\n    ## First Section ---------------------------------------------------------------\n    message(\"First Section\")\n\n    ## Second Section --------------------------------------------------------------\n    message(\"Second Section\")\n\n\n    ## Third Section ---------------------------------------------------------------\n    message(\"Third section\")\n\n\n    ## Output  ---------------------------------------------------------------------\n    message(\"Output\")\n\n    # save(x,file.path(output.path,\".RData\"))\n    # write.csv(x,file.path(output.path,\"x.csv\")"
=======
    "text": "Generic Script Template 1\nThis is a generic script template with a few features. Firstly, at the top I like to define a few things:\n\nPath of the project\nOverall purpose of the script\nWho wrote the script\nDate (which is taken automatically using sys.time()\nWho and when the code has been QC’d\n\nYou’ll also notice I use ## text ----. The reason for this is it creates section headers which make navigating code easier.\n\n\n\n\n\n\nsnippet header\n    ## ─────────────────────────────────────────────────────────────────────────────\n    ##\n    ## Project: `r paste(gsub(\".*STUDY FOLDER/\",\"\",getwd()))`\n    ##\n    ## Purpose of script:\n    ##\n    ## Author: \n    ##\n    ## Date Created: `r paste(format(Sys.time(), \"%d-%m-%Y\"))`\n    ##\n    ## QC'd by:\n    ## QC date:\n    ##\n    ## ─────────────────────────────────────────────────────────────────────────────\n    ##\n    ## Notes:\n    ##   \n    ##\n    ## ─────────────────────────────────────────────────────────────────────────────\n    ##\n    ## \n    ## set working directory -------------------------------------------------------\n    message(\"Set working directory\")\n\n    # setwd(\"~/\")  \n    \n    ## Options ---------------------------------------------------------------------\n    \n    # options(scipen = 6, digits = 4) # View outputs in non-scientific notation\n\n    ## Load packages ---------------------------------------------------------------\n    message(\"Load packages\")\n\n    ## Set file paths --------------------------------------------------------------\n    message(\"Set file paths\")\n\n    base.path &lt;- \"\"\n    data.path &lt;- \"\"\n    output.path &lt;- \"\"\n    template.path &lt;- \"\"\n\n\n    ## Load data -------------------------------------------------------------------\n    message(\"Load data\")\n     \n    # data &lt;- fread(file.path(data.path, \".csv\")) # or read.csv, etc\n    # load(x,file.path(data.path,\".RData\"))\n    # load(file.path(\"C:/Users/isfar.RData\"), isfar_env &lt;- new.env())\n\n\n    ## First Section ---------------------------------------------------------------\n    message(\"First Section\")\n\n    ## Second Section --------------------------------------------------------------\n    message(\"Second Section\")\n\n\n    ## Third Section ---------------------------------------------------------------\n    message(\"Third section\")\n\n\n    ## Output  ---------------------------------------------------------------------\n    message(\"Output\")\n\n    # save(x,file.path(output.path,\".RData\"))\n    # write.csv(x,file.path(output.path,\"x.csv\")"
>>>>>>> 5080d96ce132128087f7733f2d9a3896fd9e9c72
  },
  {
    "objectID": "posts/Standardising Scripts/index.html#config-script-template",
    "href": "posts/Standardising Scripts/index.html#config-script-template",
    "title": "More Efficient Working",
    "section": "Config Script Template",
<<<<<<< HEAD
    "text": "Config Script Template\n\nsnippet cctuconfigtemplate\n    ## ─────────────────────────────────────────────────────────────────────────────\n    ##\n    ## Project: `r paste(gsub(\".*STUDY FOLDER/\",\"\",getwd()))`\n    ##\n    ## Purpose of script:\n    ##\n    ## Author: \n    ##\n    ## Date Created: `r paste(format(Sys.time(), \"%d-%m-%Y\"))`\n    ##\n    ## QC'd by:\n    ## QC date:\n    ##\n    ## ─────────────────────────────────────────────────────────────────────────────\n    ##\n    ## Notes:\n    ##   \n    ##\n    ## ─────────────────────────────────────────────────────────────────────────────\n    ##\n    ## \n    ## Preliminary -----------------------------------------------------------------\n    message(\"Preliminary\")\n\n    # Remove objects from workspace\n    rm(list = ls())\n    \n    ## Options ---------------------------------------------------------------------\n    \n    options(verbose = TRUE, stringsAsFactors = FALSE)\n\n    ## Load packages ---------------------------------------------------------------\n    message(\"Load packages\")\n    # List of packages to be used\n    packages &lt;-\n      c(\n            \"magrittr\",\n            \"dplyr\",\n            \"tidyr\",\n            \"ggplot2\",\n            \"dplyr\",\n            \"lubridate\",\n            \"RODBC\",\n            \"data.table\",\n            \"stringr\",\n            \"grid\",\n            \"gridExtra\"\n            )\n\n\n    # Install cctu package (needs devtools)\n    # Install packages which aren't installed in \"packages\"\n    # if (length(packages[!(packages %in% installed.packages()[, \"Package\"])]))\n    #   install.packages(packages[!(packages %in% installed.packages()[, \"Package\"])])\n    # Load packages\n    lapply(packages, library, character.only = TRUE)\n\n    # source functions from sub folder functions\n    file.sources = list.files(\n    c(\"progs/functions\"),\n    pattern = \"\\\\.R$\",\n    full.names = TRUE,\n    ignore.case = T\n    )\n\n    sapply(file.sources,source)\n    # define theme for figures\n    default_theme &lt;- theme_get()\n\n    graphical_theme &lt;- theme_bw() + theme(\n     axis.line.x      = element_line(color = \"black\")\n     axis.line.y      = element_line(color = \"black\"),\n     panel.grid.major = element_blank() ,\n     panel.grid.minor = element_blank(),\n     panel.background = element_blank(),\n     # panel.border = element_blank(),\n     # axis.text = element_text(size = rel(1), angle = 45)\n     axis.title.x     = element_text(margin = margin(t = 10)),\n     legend.key       = element_rect(colour = \"white\", fill = NA),\n     strip.background = element_rect(colour = \"black\")\n    )"
=======
    "text": "Config Script Template"
>>>>>>> 5080d96ce132128087f7733f2d9a3896fd9e9c72
  }
]